[
  {
    "content": "# Module Federation\n\nIt was through a sharing session within my organisation that I learned about [Module Federation](https://webpack.js.org/concepts/module-federation/) as one of the most exciting feature in Webpack 5. According to different blogs, they claimed that this is a game changer in JavaScript.\n\n## What is Module Federation?\n\nBased on the definition, it is a webpack module that makes sharing code and dependencies between different code bases easier. This loads the code dynamically at runtime to reduce code duplication and only downloads the missing dependencies if any.\n\n## Possible uses\n\n### Component library\n\nAs part of the sharing session, it was being introduced with the component library build for the organisation. This is important and useful so that there is a single design language which enforces the brand and UX guidelines across all the other projects.\n\n### Micro-frontends\n\nThey are not exactly components but main purpose is basically to scale applications that are in large organisations.\n\n## Personal thoughts\n\nThis is a very new concept to me and is something I definitely look forward to utilise. At this moment, I will choose to use it for projects that requires scalability and huge amount of code sharing among independent applications.\n\nThat is all I have for today and really excited to see where Module Federation brings JavaScript to.",
    "date": "2023-03-02",
    "slug": "module-federation",
    "title": "Module Federation"
  },
  {
    "content": "# console.table()\n\nWe are all familiar with things like:\n\n1. `console.log()`\n2. `console.error()`\n3. `console.warn()`\n4. `console.info()`\n\nBut, `console.table()` is a really interesting one.\n\nIt basically displays the data that one would log to the console in a table form, as per what the method suggests so.\n\n## Example\n\n```js\nconst items = [\"foo\", \"bar\", \"baz\"];\n\nconsole.table(items);\n```\n\n| Index | Value |\n| ----- | ----- |\n| 0     | foo   |\n| 1     | bar   |\n| 2     | baz   |\n\n`console.table()` definitely formats the data nicely and makes things easier to read.",
    "date": "2023-02-24",
    "slug": "console-table",
    "title": "console.table()"
  },
  {
    "content": "# CSS: line-clamp\n\nA very useful CSS trick to truncate long text to the number of lines specified. Using this CSS tricks do help in performance as JavaScript is generally heavy and expensive in resource.\n\n## CSS\n\n```css\n.long-text {\n  width: 300px;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  overflow: hidden;\n}\n```\n\n## HTML\n\n```html\n<p class=\"long-text\">\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid architecto\n  asperiores distinctio dolore, dolores eaque error esse eum hic id inventore\n  magni maxime minus modi molestiae quasi quod tempora voluptates?\n</p>\n```\n\n## Result\n\nAnd the result? Just a simple 3 lines of text ending with an ellipsis.\n\n```html\nLorem ipsum dolor sit amet,\n<br />\nconsectetur adipisicing elit.\n<br />\nAutem consectetur esse in quos reprehenderit voluptas...\n```",
    "date": "2023-02-23",
    "slug": "css-line-clamp",
    "title": "CSS: line-clamp"
  },
  {
    "content": "# Parse String to Boolean using JSON.parse()\n\n`JSON.parse()` is able to convert a string to boolean easily while retaining its value.\n\n```js\nlet strTrue = \"true\";\nlet strFalse = \"false\";\n\nconsole.log(JSON.parse(strTrue)); // true\nconsole.log(JSON.parse(strFalse)); // false\n```\n\nWhile working on environment variables using `process.env` from a `.env` file, I realised that I had to use strict equal `process.env.SOME_VARIABLE === \"true\"` in order to make the condition as a valid boolean since environment variables are `typeof` String. While finding a better way around this, I came across using the `JSON.parse()` way that seems to make it easier. I was able to write a reusable function to make things easier for me too.\n\n```yaml .env\nSOME_VARIABLE=true\n```\n\n```ts\nconst isFeatureEnabled = (feature: string): boolean => {\n  return JSON.parse(feature);\n};\n\nisFeatureEnabled(process.env.SOME_VARIABLE); // true\n```\n\nLet me know how other ways do you handle converting a string of values \"true\" or \"false\" to their boolean values.",
    "date": "2023-02-13",
    "slug": "parse-string-to-boolean-using-json-parse",
    "title": "Parse String to Boolean using JSON.parse()"
  },
  {
    "content": "# import.meta\n\nI recently found out about the `import.meta` syntax while working on [Sanity](https://sanity.io) that uses Vite.\n\nThe `import.meta` is an object that is bundled with the JavaScript Modules. It contains information about the module and is extensible.\n\nThe following is an example of using the query parameters with the `import` syntax.\n\n```html\n<script type=\"module\">\n  import \"./index.mjs?someParams=foo\";\n</script>\n```\n\nThe `index.mjs` module is able to read the parameters `someParams` using the `import.meta` syntax\n\n```js\nnew URL(import.meta.url).searchParams.get(\"someParams\"); // foo\n```\n\nThis is something new to me in which it cannot be done when using `process.env`\n\n## TypeScript\n\nWe are able to create the typing through `env.d.ts` in the root of the project\n\n```ts\n// env.d.ts\ninterface ImportMetaEnv {\n  SOME_ENV_VARIABLE: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\n## Uses\n\nThis is normally used in the browser.\n\n- [Vite](https://vitejs.dev)",
    "date": "2023-02-12",
    "slug": "import-meta",
    "title": "import.meta"
  },
  {
    "content": "# RSS Autodiscovery to Site\n\nInterestingly, there is a way to actually add the RSS feed to a site for RSS readers to pull up through their autodiscovery feature.\n\n```html\n<link\n  rel=\"alternate\"\n  type=\"application/rss+xml\"\n  title=\"RSS feed for site\"\n  href=\"/rss\"\n/>\n```\n\nAnd if the feed is an ATOM feed, change the `type` to `application/atom+xml`",
    "date": "2023-01-29",
    "slug": "rss-autodiscovery-to-site",
    "title": "RSS Autodiscovery to Site"
  },
  {
    "content": "# New Array Prototype Methods\n\nWhile reading [The State of JS 2022](https://2022.stateofjs.com/en-US/features/language/), I came across two new `Array.prototype` methods which I previously have not heard of. They are `Array.prototype.at()` and `Array.prototype.findLast()`.\n\n## .at()\n\nThis is going to be very useful for returning a value at a particular index in the array without having to iterate through. This great improve the time complexity to O(1) which is the best.\n\nAn example from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at):\n\n```js\nconst array = [5, 12, 8, 130, 44];\n\narray.at(2); // 8\n```\n\nThe `.at()` makes the code looks sweet, short and simple.\n\n## .findLast()\n\nAs we know, the `.find()` method is one of the most commonly used method to-date. The `.findLast()` is the opposite where it iterates the array in a reverse order. This is so useful if I want to search for a value that appear the last.\n\nAn example from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast):\n\n```js\nconst array = [5, 12, 50, 130, 44];\n\narray.findLast((item) => item > 45); // 130\n```",
    "date": "2023-01-29",
    "slug": "new-array-prototype-methods",
    "title": "New Array Prototype Methods"
  },
  {
    "content": "# Double tilde operator in JavaScript\n\nThere are 2 main ways to convert a string to a number.\n\n## Using Number()\n\nThe `Number()` way in JavaScript gets the job done fairly quickly. And if the string cannot be a valid number, it will return `NaN`.\n\n```js\nNumber(\"123.456\"); // 123.456\n```\n\n## Using parseInt()\n\nAnother method is using `parseInt()`. This returns the nearest rounded down integer.\n\n```js\nparseInt(\"123.456\"); // 123\n```\n\n---\n\nThe following method is the one that I recently came across. It was a rather interesting way to convert a string to a number.\n\n## Using Double tilde (~~)\n\n```js\n~~\"123.456\"; // 123\n```\n\nThis particular method ignores the decimal place and no rounding happens; just slightly different from the `parseInt()` method.",
    "date": "2023-01-10",
    "slug": "double-tilde-operator-in-javascript",
    "title": "Double tilde operator in JavaScript"
  }
]
